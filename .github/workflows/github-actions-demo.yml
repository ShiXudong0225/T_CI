name: GitHub Actions Demo

on: [push]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Set up Java
      #   uses: actions/setup-java@v3
      #   with:
      #     java-version: 8

      # - name: Set up Gradle
      #   uses: gradle/gradle-build-action@v2
      #   with: 
      #     gradle-version: 4.10.3

      # - name: Set up nodejs
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18

      # - name: Gather_files_changed
      #   uses: trilom/file-changes-action@a6ca26c14274c33b15e6499323aac178af06ad4b
      #   id: get_diff_files
      #   with:
      #     # So that `steps.get_diff_files.outputs.files` becomes
      #     # a string like `foo.js path/bar.md`
      #     fileOutput: 'json'

      # - name: Insight into changed files
      #   run: cat $HOME/files.json
      # # - name: hostname
      # #   run: echo `hostname`
      # # - name: locate
      # #   run: echo `find / -name files.json`;
      # - name: pwd
      #   run: cd $HOME/ && pwd
      # - name: copy file
      #   run: cp $HOME/files.json /home/`hostname`/files.json
      # - name: cat file
      #   run: cat /home/`hostname`/files.json
      # - name: change code
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const fs = require('fs');
      #       const path = require('path');
      #       const data = fs.readFileSync(path.resolve('/home/runner', 'files.json'));
      #       let jsonData = JSON.parse(data);
      #       var res = [];
      #       jsonData.forEach(element => {
      #         if(element.endsWith(".java")) {
      #           var item = element.split("/")[0];
      #           if(!res.includes(item)) {
      #             res.push(item);
      #           }
      #         }
      #       })
      #       console.log(res);
      #       const exec1  = require('child_process');
      #       res.forEach(element => {
      #         exec1.exec('gradle ' + element + ':jar', (err, stdout, stderr) => {
      #           if (err) {
      #             console.error(`执行gradle命令时出错: ${err}`);
      #             return;
      #           }
      #           console.log(`gradle命令输出: ${stdout}`);
      #         });
      #       })


      - name: Get_Jar_Path
        #uses: actions/github-script@v6
        #runs-on: [self-hosted]
        outputs: 
          funName: ${{steps.lambda_data.funName}}
          jarPath: ${{steps.lambda_data.jarPath}}
        steps:
          - id: lambda_data
          run: |
            echo "::set-output name=funName::232132"
            echo "::set-output name=jarPath::232132"
      
      - name: Use_Jar_Path
        #runs-on: [self-hosted]
        needs: Get_Jar_Path
        steps:
          run: echo ${{needs.Get_Jar_Path.outputs.funName}}
          run: echo ${{needs.Get_Jar_Path.outputs.jarPath}}
      # - name: Install AWS CLI
      #   run: |
      #     curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #     unzip awscliv2.zip
      #     sudo ./aws/install

      # - name: Deploy to AWS Lambda
      #   run: |
      #     sam build
      #     sam deploy --guided
